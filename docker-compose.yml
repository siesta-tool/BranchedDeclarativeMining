services:

  preprocess:
    image: mavroudo/siesta-preprocess
    ports:
      - "8000:8000"
      - "4040:4040"
    networks:
      - siesta-net
    volumes:
      - preprocesses:/app/pythonAPI/dbSQL
      - ./input:/app/pythonAPI/uploadedfiles
    environment:
      s3accessKeyAws: minioadmin
      s3ConnectionTimeout: 600000
      s3endPointLoc: http://minio:9000
      s3secretKeyAws: minioadmin
      kafkaBroker: http://kafka:9092
      kafkaTopic: test
      POSTGRES_ENDPOINT: postgres:5432/metrics
      POSTGRES_USERNAME: admin
      POSTGRES_PASSWORD: admin

  minio:
    image: minio/minio:RELEASE.2023-11-01T01-57-10Z
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --console-address ":9001" /data
    networks:
      - siesta-net
    depends_on:
      - createbuckets


  createbuckets: #automatically creates the required bucket
    image: minio/mc
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/siesta;
      /usr/bin/mc policy download myminio/siesta;
      exit 0;
      "
    networks:
      - siesta-net

  cbdeclare:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cbdeclare
    environment:
      - s3accessKeyAws=minioadmin
      - s3ConnectionTimeout=60
      - s3endPointLoc=http://minio:9000
      - s3secretKeyAws=minioadmin
    volumes:
      - ./output:/app/output
    entrypoint:
      - /opt/spark/bin/spark-submit
      - --master
      - local[*]
      - --driver-memory
      - 10g
      - --conf
      - spark.eventLog.enabled=true
      - --conf
      - spark.eventLog.dir=/tmp/spark-events
      - declare.jar
    command: ["-l", "test", "--support", "0.5", "-p", "AND"]
    depends_on:
      - minio
    networks:
      - siesta-net


networks:
  siesta-net:
    name: siesta-net
    external: true

volumes:
  minio_storage: {}
  preprocesses: {}
  postgres-data: {}